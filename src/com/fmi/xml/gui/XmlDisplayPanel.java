/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fmi.xml.gui;

import com.fmi.xml.comunicator.XmlComunicator;
import com.fmi.xml.courses.Schedule;
import com.fmi.xml.holder.ObjectsHolder;
import com.fmi.xml.others.TestObject;
import com.fmi.xml.parsable.JaxbParsable;
import java.io.File;
import java.util.Enumeration;
import javax.swing.AbstractButton;
import javax.swing.JFileChooser;
import javax.xml.bind.JAXBException;

/**
 *
 * @author Dimitar
 */
public class XmlDisplayPanel extends javax.swing.JPanel {

    /**
     * Creates new form XmlDisplayPanel
     */
    public XmlDisplayPanel() {
        initComponents();
        fileChooser = new JFileChooser();
        xmlParser = new XmlComunicator();
        holder = ObjectsHolder.getInstance();
        holder.addElement("Schedule", Schedule.class);
        holder.addElement("TestObject", TestObject.class);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        btnOpen = new javax.swing.JButton();
        radioBtnSchedule = new javax.swing.JRadioButton();
        radioBtnOther = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaContent = new javax.swing.JTextArea();
        notificationArea = new javax.swing.JTextField();
        bntValidate = new javax.swing.JButton();
        btnTransform = new javax.swing.JButton();

        btnOpen.setText("Open");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioBtnSchedule);
        radioBtnSchedule.setText("Schedule");

        buttonGroup1.add(radioBtnOther);
        radioBtnOther.setText("TestObject");
        radioBtnOther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnOtherActionPerformed(evt);
            }
        });

        txtAreaContent.setEditable(false);
        txtAreaContent.setColumns(20);
        txtAreaContent.setRows(5);
        jScrollPane1.setViewportView(txtAreaContent);

        notificationArea.setEditable(false);

        bntValidate.setText("Validate");
        bntValidate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntValidateActionPerformed(evt);
            }
        });

        btnTransform.setText("Transform");
        btnTransform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransformActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioBtnOther)
                            .addComponent(radioBtnSchedule)))
                    .addComponent(btnOpen)
                    .addComponent(bntValidate))
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(notificationArea, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnTransform)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnOpen)
                            .addComponent(notificationArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTransform))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioBtnSchedule)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioBtnOther)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bntValidate))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is called when you press the Open button from the GUI. It
     * won't do nothing if you haven't chosen class type from the radio buttons.
     * So, first you choose the class you desire to parse, then press this
     * button and get popped up to fileChooser. Navigate to the XML file you
     * want to parse and open it.
     *
     * If everything is OK -> your XML will be parsed and the content will be
     * displayed at the empty text area.
     *
     * If not -> you'll get the corresponding error messages.
     *
     */
    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed

        if (buttonGroup1.getSelection() == null) {
            notificationArea.setText("Please choose objects format!");
            return;
        }

        File file = chooseFile();
        if (file == null) {
            return;
        }
        if (!file.toString().endsWith(".xml")) {
            notificationArea.setText("Unknown file format!");
            return;
        } else {
            notificationArea.setText("OK");
        }

        String selectedButton = getSelectedButton();

        try {
            content = (JaxbParsable) xmlParser.loadObject(file, selectedButton);
            txtAreaContent.setText(content.toString());
        } catch (JAXBException | IllegalArgumentException ex) {
            displayExceptionMessage();
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void radioBtnOtherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnOtherActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioBtnOtherActionPerformed

    /**
     * Once you've already successfully loaded a XML file, you can validate it
     * with this button.
     *
     * All you have to do is choose a XSD schema from the fileChooser. Then your
     * object will be validated an you'll get message if the validation was
     * successful or it failed.
     *
     */
    private void bntValidateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntValidateActionPerformed
        if (content == null) {
            notificationArea.setText("Nothing to validate!");
            return;
        }
        File file = chooseFile();
        if (file == null) {
            return;
        }
        if (!file.toString().endsWith(".xsd")) {
            notificationArea.setText("Unknown file format!");
            return;
        } else {
            notificationArea.setText("OK");
        }

        if (xmlParser.validate(content, file)) {
            notificationArea.setText("Validated Successfully!");
        } else {
            notificationArea.setText("Validation Failed!");
        }
    }//GEN-LAST:event_bntValidateActionPerformed

    private void btnTransformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransformActionPerformed
        if (content == null) {
            notificationArea.setText("Nothing to validate!");
            return;
        }
        File file = chooseFile();
        if (file == null) {
            return;
        }
        if (!file.toString().endsWith(".xsl")) {
            notificationArea.setText("Unknown file format!");
            return;
        } else {
            notificationArea.setText("OK");
        }

        if (xmlParser.applyTransformation(content, file)) {
            notificationArea.setText("Transformation Successfully!");
        } else {
            notificationArea.setText("Transformation Failed!");
        }
    }//GEN-LAST:event_btnTransformActionPerformed

    private JaxbParsable content;
    private final ObjectsHolder holder;
    private final XmlComunicator xmlParser;
    private final JFileChooser fileChooser;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntValidate;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnTransform;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField notificationArea;
    private javax.swing.JRadioButton radioBtnOther;
    private javax.swing.JRadioButton radioBtnSchedule;
    private javax.swing.JTextArea txtAreaContent;
    // End of variables declaration//GEN-END:variables

    private File chooseFile() {
        int chosen = fileChooser.showOpenDialog(this);
        if (chosen == JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFile();
        }
        return null;
    }

    private String getSelectedButton() {
        for (Enumeration<AbstractButton> buttons = buttonGroup1.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();
            if (button.isSelected()) {
                return button.getText();
            }
        }
        return null;
    }

    private void displayExceptionMessage() {
        notificationArea.setText("Invalid Class or invalid decorators!");
        txtAreaContent.setText("");
    }
}
